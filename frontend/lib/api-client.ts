import type { components } from "./api-types";

/**
 * Do not direct create the DTO types manually since they are generated from the OpenAPI schema.
 * Instead, use the types generated by the OpenAPI generator.
 * This ensures consistency and reduces maintenance overhead.
 */

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3000";

// Extract types from the generated OpenAPI types
export type Organization = components["schemas"]["OrganizationResponseDto"];
export type CreateOrganizationDto = components["schemas"]["CreateOrganizationDto"];
export type UpdateOrganizationDto = components["schemas"]["UpdateOrganizationDto"];
export type CreateLocationDto = components["schemas"]["CreateLocationDto"];
export type UpdateLocationDto = components["schemas"]["UpdateLocationDto"];
export type CreateResourceDto = components["schemas"]["CreateResourceDto"];
export type UpdateResourceDto = components["schemas"]["UpdateResourceDto"];
export type UpdateOrganizationSettingsDto = components["schemas"]["UpdateOrganizationSettingsDto"];
export type BusinessHoursDto = components["schemas"]["BusinessHoursDto"];
export type CreateServiceDto = components["schemas"]["CreateServiceDto"];
export type UpdateServiceDto = components["schemas"]["UpdateServiceDto"];

// Response types from operations
export type LocationResponse = {
  id: string;
  name: string;
  description?: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
  phone?: string;
  email?: string;
  isPrimary: boolean;
  isActive: boolean;
  organizationId: string;
  createdAt: string;
  updatedAt: string;
};

export type ResourceResponse = {
  id: string;
  name: string;
  type: "ROOM" | "EQUIPMENT";
  description?: string;
  capacity?: number;
  locationId?: string;
  isBookable: boolean;
  isActive: boolean;
  organizationId: string;
  createdAt: string;
  updatedAt: string;
};

export type OrganizationSettingsResponse = {
  id: string;
  organizationId: string;
  bookingWindowDays: number;
  cancellationWindowHours: number;
  lateCancelPenalty: boolean;
  noShowPenalty: boolean;
  waitlistEnabled: boolean;
  maxWaitlistSize: number;
  defaultClassDuration: number;
  allowRecurringBookings: boolean;
  maxBookingsPerMember: number;
  sendConfirmationEmails: boolean;
  sendReminderEmails: boolean;
  reminderHours: number;
  primaryColor?: string;
  secondaryColor?: string;
  logoUrl?: string;
  faviconUrl?: string;
  customDomain?: string;
  requireMembershipForBooking: boolean;
  allowGuestBookings: boolean;
  minimumAdvanceBooking: number;
  maximumAdvanceBooking: number;
  businessHours: BusinessHoursDto[];
  createdAt: string;
  updatedAt: string;
};

export type ServiceResponse = {
  id: string;
  name: string;
  description?: string;
  type: "CLASS" | "APPOINTMENT" | "WORKSHOP" | "PERSONAL_TRAINING";
  duration: number;
  capacity?: number;
  price?: number;
  bookable: boolean;
  requiresApproval: boolean;
  allowWaitlist: boolean;
  locationId?: string;
  primaryInstructorId?: string;
  assistantInstructorId?: string;
  resourceIds?: string[];
  color?: string;
  isActive: boolean;
  organizationId: string;
  createdAt: string;
  updatedAt: string;
};

// Generic API error
interface ApiError {
  message: string;
  statusCode: number;
  error?: string;
}

class ApiClient {
  private baseUrl: string;

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;

    const config: RequestInit = {
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
      ...options,
    };

    try {
      const response = await fetch(url, config);

      if (!response.ok) {
        const errorData: ApiError = await response.json().catch(() => ({
          message: "An error occurred",
          statusCode: response.status,
        }));
        throw new Error(errorData.message || `HTTP ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      if (error instanceof Error) {
        throw error;
      }
      throw new Error("An unexpected error occurred");
    }
  }

  // Organizations API methods
  async getOrganizations(): Promise<Organization[]> {
    return this.request<Organization[]>("/organizations");
  }

  async getOrganization(id: string): Promise<Organization> {
    return this.request<Organization>(`/organizations/${id}`);
  }

  async getOrganizationBySlug(slug: string): Promise<Organization> {
    return this.request<Organization>(`/organizations/slug/${slug}`);
  }

  async createOrganization(data: CreateOrganizationDto): Promise<Organization> {
    return this.request<Organization>("/organizations", {
      method: "POST",
      body: JSON.stringify(data),
    });
  }

  async updateOrganization(
    id: string,
    data: UpdateOrganizationDto
  ): Promise<Organization> {
    return this.request<Organization>(`/organizations/${id}`, {
      method: "PATCH",
      body: JSON.stringify(data),
    });
  }

  async deleteOrganization(id: string): Promise<void> {
    return this.request<void>(`/organizations/${id}`, {
      method: "DELETE",
    });
  }

  // Organization Locations API methods
  async getOrganizationLocations(organizationId: string): Promise<LocationResponse[]> {
    return this.request<LocationResponse[]>(`/organizations/${organizationId}/locations`);
  }

  async getOrganizationLocation(organizationId: string, locationId: string): Promise<LocationResponse> {
    return this.request<LocationResponse>(`/organizations/${organizationId}/locations/${locationId}`);
  }

  async createOrganizationLocation(
    organizationId: string,
    data: CreateLocationDto
  ): Promise<LocationResponse> {
    return this.request<LocationResponse>(`/organizations/${organizationId}/locations`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }

  async updateOrganizationLocation(
    organizationId: string,
    locationId: string,
    data: UpdateLocationDto
  ): Promise<LocationResponse> {
    return this.request<LocationResponse>(`/organizations/${organizationId}/locations/${locationId}`, {
      method: "PATCH",
      body: JSON.stringify(data),
    });
  }

  async deleteOrganizationLocation(organizationId: string, locationId: string): Promise<void> {
    return this.request<void>(`/organizations/${organizationId}/locations/${locationId}`, {
      method: "DELETE",
    });
  }

  // Organization Resources API methods
  async getOrganizationResources(organizationId: string): Promise<ResourceResponse[]> {
    return this.request<ResourceResponse[]>(`/organizations/${organizationId}/resources`);
  }

  async getOrganizationResource(organizationId: string, resourceId: string): Promise<ResourceResponse> {
    return this.request<ResourceResponse>(`/organizations/${organizationId}/resources/${resourceId}`);
  }

  async createOrganizationResource(
    organizationId: string,
    data: CreateResourceDto
  ): Promise<ResourceResponse> {
    return this.request<ResourceResponse>(`/organizations/${organizationId}/resources`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }

  async updateOrganizationResource(
    organizationId: string,
    resourceId: string,
    data: UpdateResourceDto
  ): Promise<ResourceResponse> {
    return this.request<ResourceResponse>(`/organizations/${organizationId}/resources/${resourceId}`, {
      method: "PATCH",
      body: JSON.stringify(data),
    });
  }

  async deleteOrganizationResource(organizationId: string, resourceId: string): Promise<void> {
    return this.request<void>(`/organizations/${organizationId}/resources/${resourceId}`, {
      method: "DELETE",
    });
  }

  // Organization Settings API methods
  async getOrganizationSettings(organizationId: string): Promise<OrganizationSettingsResponse> {
    return this.request<OrganizationSettingsResponse>(`/organizations/${organizationId}/settings`);
  }

  async updateOrganizationSettings(
    organizationId: string,
    data: UpdateOrganizationSettingsDto
  ): Promise<OrganizationSettingsResponse> {
    return this.request<OrganizationSettingsResponse>(`/organizations/${organizationId}/settings`, {
      method: "PATCH",
      body: JSON.stringify(data),
    });
  }

  // Organization Services API methods
  async getOrganizationServices(organizationId: string): Promise<ServiceResponse[]> {
    return this.request<ServiceResponse[]>(`/organizations/${organizationId}/services`);
  }

  async getOrganizationService(organizationId: string, serviceId: string): Promise<ServiceResponse> {
    return this.request<ServiceResponse>(`/organizations/${organizationId}/services/${serviceId}`);
  }

  async getOrganizationServicesByType(
    organizationId: string,
    serviceType: "CLASS" | "APPOINTMENT" | "WORKSHOP" | "PERSONAL_TRAINING"
  ): Promise<ServiceResponse[]> {
    return this.request<ServiceResponse[]>(`/organizations/${organizationId}/services/type/${serviceType}`);
  }

  async createOrganizationService(
    organizationId: string,
    data: CreateServiceDto
  ): Promise<ServiceResponse> {
    return this.request<ServiceResponse>(`/organizations/${organizationId}/services`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }

  async updateOrganizationService(
    organizationId: string,
    serviceId: string,
    data: UpdateServiceDto
  ): Promise<ServiceResponse> {
    return this.request<ServiceResponse>(`/organizations/${organizationId}/services/${serviceId}`, {
      method: "PATCH",
      body: JSON.stringify(data),
    });
  }

  async deleteOrganizationService(organizationId: string, serviceId: string): Promise<void> {
    return this.request<void>(`/organizations/${organizationId}/services/${serviceId}`, {
      method: "DELETE",
    });
  }
}

// Export a singleton instance
export const apiClient = new ApiClient();

// Export the class for testing or custom instances
export { ApiClient };
