/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all organizations */
        get: operations["OrganizationController_findAll"];
        put?: never;
        /** Create a new organization */
        post: operations["OrganizationController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization by ID */
        get: operations["OrganizationController_findOne"];
        put?: never;
        post?: never;
        /** Delete organization (soft delete) */
        delete: operations["OrganizationController_remove"];
        options?: never;
        head?: never;
        /** Update organization */
        patch: operations["OrganizationController_update"];
        trace?: never;
    };
    "/organizations/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization by slug */
        get: operations["OrganizationController_findBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all locations for organization */
        get: operations["OrganizationController_findLocations"];
        put?: never;
        /** Create a new location for organization */
        post: operations["OrganizationController_createLocation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{id}/locations/{locationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get location by ID */
        get: operations["OrganizationController_findLocation"];
        put?: never;
        post?: never;
        /** Delete location (soft delete) */
        delete: operations["OrganizationController_removeLocation"];
        options?: never;
        head?: never;
        /** Update location */
        patch: operations["OrganizationController_updateLocation"];
        trace?: never;
    };
    "/organizations/{id}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all resources for organization */
        get: operations["OrganizationController_findResources"];
        put?: never;
        /** Create a new resource for organization */
        post: operations["OrganizationController_createResource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{id}/resources/{resourceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get resource by ID */
        get: operations["OrganizationController_findResource"];
        put?: never;
        post?: never;
        /** Delete resource (soft delete) */
        delete: operations["OrganizationController_removeResource"];
        options?: never;
        head?: never;
        /** Update resource */
        patch: operations["OrganizationController_updateResource"];
        trace?: never;
    };
    "/organizations/{id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization settings */
        get: operations["OrganizationController_getSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update organization settings */
        patch: operations["OrganizationController_updateSettings"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateOrganizationDto: {
            /** @description Organization name */
            name: string;
            /** @description Unique slug for URL identification */
            slug: string;
            /** @description Organization description */
            description?: string;
            /** @description Organization website */
            website?: string;
            /** @description Primary contact phone */
            phone?: string;
            /** @description Primary contact email */
            email?: string;
            /** @description Street address */
            address?: string;
            /** @description City */
            city?: string;
            /** @description State */
            state?: string;
            /** @description ZIP code */
            zipCode?: string;
            /**
             * @description Country
             * @default US
             */
            country: string;
            /**
             * @description Timezone
             * @default UTC
             */
            timezone: string;
            /**
             * @description Currency
             * @default USD
             */
            currency: string;
            /**
             * @description Business type
             * @default gym
             */
            businessType: string;
        };
        OrganizationResponseDto: {
            /** @description Organization ID */
            id: string;
            /** @description Organization name */
            name: string;
            /** @description Unique slug for URL identification */
            slug: string;
            /** @description Organization description */
            description?: string;
            /** @description Organization website */
            website?: string;
            /** @description Primary contact phone */
            phone?: string;
            /** @description Primary contact email */
            email?: string;
            /** @description Street address */
            address?: string;
            /** @description City */
            city?: string;
            /** @description State */
            state?: string;
            /** @description ZIP code */
            zipCode?: string;
            /** @description Country */
            country: string;
            /** @description Timezone */
            timezone: string;
            /** @description Currency */
            currency: string;
            /** @description Business type */
            businessType: string;
            /** @description Active status */
            isActive: boolean;
            /** @description Subscription tier */
            subscriptionTier: string;
            /**
             * Format: date-time
             * @description Creation date
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update date
             */
            updatedAt: string;
        };
        UpdateOrganizationDto: {
            /** @description Organization name */
            name?: string;
            /** @description Organization description */
            description?: string;
            /** @description Organization website */
            website?: string;
            /** @description Primary contact phone */
            phone?: string;
            /** @description Primary contact email */
            email?: string;
            /** @description Street address */
            address?: string;
            /** @description City */
            city?: string;
            /** @description State */
            state?: string;
            /** @description ZIP code */
            zipCode?: string;
            /** @description Country */
            country?: string;
            /** @description Timezone */
            timezone?: string;
            /** @description Currency */
            currency?: string;
            /** @description Business type */
            businessType?: string;
            /** @description Active status */
            isActive?: boolean;
        };
        CreateLocationDto: {
            /** @description Location name */
            name: string;
            /** @description Location description */
            description?: string;
            /** @description Street address */
            address: string;
            /** @description City */
            city: string;
            /** @description State */
            state: string;
            /** @description ZIP code */
            zipCode: string;
            /**
             * @description Country
             * @default US
             */
            country: string;
            /** @description Phone number */
            phone?: string;
            /** @description Email address */
            email?: string;
            /**
             * @description Is primary location
             * @default false
             */
            isPrimary: boolean;
        };
        UpdateLocationDto: {
            /** @description Location name */
            name?: string;
            /** @description Location description */
            description?: string;
            /** @description Street address */
            address?: string;
            /** @description City */
            city?: string;
            /** @description State */
            state?: string;
            /** @description ZIP code */
            zipCode?: string;
            /** @description Country */
            country?: string;
            /** @description Phone number */
            phone?: string;
            /** @description Email address */
            email?: string;
            /** @description Is primary location */
            isPrimary?: boolean;
            /** @description Active status */
            isActive?: boolean;
        };
        CreateResourceDto: {
            /** @description Resource name */
            name: string;
            /**
             * @description Resource type
             * @enum {string}
             */
            type: "ROOM" | "EQUIPMENT";
            /** @description Resource description */
            description?: string;
            /** @description Capacity (for rooms/spaces) */
            capacity?: number;
            /** @description Location ID */
            locationId?: string;
            /**
             * @description Is bookable
             * @default true
             */
            isBookable: boolean;
        };
        UpdateResourceDto: {
            /** @description Resource name */
            name?: string;
            /**
             * @description Resource type
             * @enum {string}
             */
            type?: "ROOM" | "EQUIPMENT";
            /** @description Resource description */
            description?: string;
            /** @description Capacity (for rooms/spaces) */
            capacity?: number;
            /** @description Location ID */
            locationId?: string;
            /** @description Is bookable */
            isBookable?: boolean;
            /** @description Active status */
            isActive?: boolean;
        };
        BusinessHoursDto: {
            /** @description Day of week (0-6, Sunday=0) */
            dayOfWeek: number;
            /** @description Opening time (HH:mm format) */
            openTime: string;
            /** @description Closing time (HH:mm format) */
            closeTime: string;
            /** @description Is open on this day */
            isOpen: boolean;
        };
        UpdateOrganizationSettingsDto: {
            /** @description Booking window in days */
            bookingWindowDays?: number;
            /** @description Cancellation window in hours */
            cancellationWindowHours?: number;
            /** @description Late cancel penalty enabled */
            lateCancelPenalty?: boolean;
            /** @description No show penalty enabled */
            noShowPenalty?: boolean;
            /** @description Waitlist enabled */
            waitlistEnabled?: boolean;
            /** @description Maximum waitlist size */
            maxWaitlistSize?: number;
            /** @description Default class duration in minutes */
            defaultClassDuration?: number;
            /** @description Allow recurring bookings */
            allowRecurringBookings?: boolean;
            /** @description Max bookings per member */
            maxBookingsPerMember?: number;
            /** @description Send confirmation emails */
            sendConfirmationEmails?: boolean;
            /** @description Send reminder emails */
            sendReminderEmails?: boolean;
            /** @description Reminder hours before class */
            reminderHours?: number;
            /** @description Primary brand color */
            primaryColor?: string;
            /** @description Secondary brand color */
            secondaryColor?: string;
            /** @description Logo URL */
            logoUrl?: string;
            /** @description Favicon URL */
            faviconUrl?: string;
            /** @description Custom domain */
            customDomain?: string;
            /** @description Require membership for booking */
            requireMembershipForBooking?: boolean;
            /** @description Allow guest bookings */
            allowGuestBookings?: boolean;
            /** @description Minimum advance booking in minutes */
            minimumAdvanceBooking?: number;
            /** @description Maximum advance booking in minutes */
            maximumAdvanceBooking?: number;
            /** @description Business hours */
            businessHours?: components["schemas"]["BusinessHoursDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organizations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponseDto"][];
                };
            };
        };
    };
    OrganizationController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationDto"];
            };
        };
        responses: {
            /** @description Organization created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponseDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization slug already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponseDto"];
                };
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrganizationDto"];
            };
        };
        responses: {
            /** @description Organization updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponseDto"];
                };
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_findBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponseDto"];
                };
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_findLocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Locations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_createLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLocationDto"];
            };
        };
        responses: {
            /** @description Location created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_findLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
                /** @description Location ID */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Location retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Location not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_removeLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
                /** @description Location ID */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Location deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Location not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_updateLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
                /** @description Location ID */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLocationDto"];
            };
        };
        responses: {
            /** @description Location updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Location not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_findResources: {
        parameters: {
            query?: {
                /** @description Filter by resource type */
                type?: "ROOM" | "EQUIPMENT";
                /** @description Filter by location ID */
                locationId?: string;
            };
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resources retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_createResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateResourceDto"];
            };
        };
        responses: {
            /** @description Resource created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_findResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
                /** @description Resource ID */
                resourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_removeResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
                /** @description Resource ID */
                resourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_updateResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
                /** @description Resource ID */
                resourceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateResourceDto"];
            };
        };
        responses: {
            /** @description Resource updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Settings retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_updateSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrganizationSettingsDto"];
            };
        };
        responses: {
            /** @description Settings updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
